"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6234],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94377:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={title:"\u9519\u8bef\u68c0\u67e5",linkTitle:"\u9519\u8bef\u68c0\u67e5",type:"docs",weight:2,description:"\u9519\u8bef\u68c0\u67e5"},l=void 0,p={unversionedId:"reference/lang/lang/spec/error",id:"reference/lang/lang/spec/error",title:"\u9519\u8bef\u68c0\u67e5",description:"\u9519\u8bef\u68c0\u67e5",source:"@site/docs/reference/lang/lang/spec/error.md",sourceDirName:"reference/lang/lang/spec",slug:"/reference/lang/lang/spec/error",permalink:"/docs/reference/lang/lang/spec/error",editUrl:"https://github.com/KusionStack/kusionstack.io/blob/main/docs/reference/lang/lang/spec/error.md",tags:[],version:"current",lastUpdatedBy:"\u6768\u82f1\u660e",lastUpdatedAt:1659932183,formattedLastUpdatedAt:"2022/8/8",frontMatter:{title:"\u9519\u8bef\u68c0\u67e5",linkTitle:"\u9519\u8bef\u68c0\u67e5",type:"docs",weight:2,description:"\u9519\u8bef\u68c0\u67e5"},sidebar:"reference",previous:{title:"\u6570\u636e\u7c7b\u578b",permalink:"/docs/reference/lang/lang/spec/datatypes"},next:{title:"\u8868\u8fbe\u5f0f",permalink:"/docs/reference/lang/lang/spec/expressions"}},c={},u=[{value:"Syntax",id:"syntax",level:2},{value:"The Implementation",id:"the-implementation",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When errors happen, developers should be able to detect the error and abort\nexecution. Thus, KCL introduce the ",(0,o.kt)("inlineCode",{parentName:"p"},"assert")," syntax."),(0,o.kt)("p",null,"In the previous topic of ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," syntax. Errors can also be raised when a\nschema is violated."),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("p",null,"The syntax of the ",(0,o.kt)("inlineCode",{parentName:"p"},"assert")," statement is the following."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"assert_stmt: 'assert' test [',' test]\n")),(0,o.kt)("p",null,"In the basic form, an ",(0,o.kt)("inlineCode",{parentName:"p"},"assert")," statement evaluates an expression. If the\nexpression is evaluated to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),", the assertion is failed, and an error\nshould be reported."),(0,o.kt)("p",null,"In the extended form, an error message can be provided. The error message is\nanother expression. It is only evaluated when the expression to be evaluated\nis evaluated to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),". The evaluation result of the error message is printed\nwhen reporting the error."),(0,o.kt)("p",null,"The following is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'a = 1\nb = 3\n# a != b evaluates to True, therefore no error should happen.\nassert a != b\n# a == b is False, in the reported error message, the message "SOS" should be printed.\nassert a == b, "SOS"\n')),(0,o.kt)("h2",{id:"the-implementation"},"The Implementation"),(0,o.kt)("p",null,"When an error happens, no matter it is caused by the ",(0,o.kt)("inlineCode",{parentName:"p"},"assert")," or the ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," syntax,\nthe virtual machine should exit with an exit code greater than ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("p",null,"The virtual machine may choose to dump the back trace information, and it is strongly\nrecommended to implement it."),(0,o.kt)("p",null,"In practice, KCLVM can dump back trace by default, and an argument can be introduced\nto disable it."))}m.isMDXComponent=!0}}]);