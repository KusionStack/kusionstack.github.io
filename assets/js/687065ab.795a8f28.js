"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7449],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),a=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=a(n),f=o,k=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(k,u(u({ref:t},c),{},{components:n})):r.createElement(k,u({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,u=new Array(i);u[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,u[1]=s;for(var a=2;a<i;a++)u[a]=n[a];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>a});var r=n(7462),o=(n(7294),n(3905));const i={},u="kusion build",s={unversionedId:"user_docs/reference/cli/kusion/kusion_build",id:"version-v0.9/user_docs/reference/cli/kusion/kusion_build",title:"kusion build",description:"Build Kusion modules in a Stack to the Intent.",source:"@site/versioned_docs/version-v0.9/user_docs/reference/cli/kusion/kusion_build.md",sourceDirName:"user_docs/reference/cli/kusion",slug:"/user_docs/reference/cli/kusion/kusion_build",permalink:"/docs/user_docs/reference/cli/kusion/kusion_build",draft:!1,editUrl:"https://github.com/KusionStack/kusionstack.io/blob/main/versioned_docs/version-v0.9/user_docs/reference/cli/kusion/kusion_build.md",tags:[],version:"v0.9",lastUpdatedBy:"Dayuan",lastUpdatedAt:1704799951,formattedLastUpdatedAt:"Jan 9, 2024",frontMatter:{},sidebar:"user_docs",previous:{title:"kusion apply",permalink:"/docs/user_docs/reference/cli/kusion/kusion_apply"},next:{title:"kusion compile",permalink:"/docs/user_docs/reference/cli/kusion/kusion_compile"}},l={},a=[{value:"Synopsis",id:"synopsis",level:3},{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 30-Nov-2023",id:"auto-generated-by-spf13cobra-on-30-nov-2023",level:6}],c={toc:a};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kusion-build"},"kusion build"),(0,o.kt)("p",null,"Build Kusion modules in a Stack to the Intent."),(0,o.kt)("h3",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"Build Kusion modules in a Stack to the Intent."),(0,o.kt)("p",null," The command must be executed in a Stack or by specifying a Stack directory with the -w flag. You can provide a list of arguments to replace the placeholders defined in KCL, and use the --output flag to output the built results to a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kusion build [flags]\n")),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  # Build main.k with arguments\n  kusion build -D name=test -D age=18\n  \n  # Build main.k with work directory\n  kusion build -w appops/demo/dev\n  \n  # Build main.k and write result into output.yaml\n  kusion build -o output.yaml\n  \n  # Build without output style and color\n  kusion build --no-style=true\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  -D, --argument stringToString   Specify the top-level argument (default [])\n  -h, --help                      help for build\n      --no-style                  Disable the output style and color\n  -o, --output string             Specify the output file\n  -w, --workdir string            Specify the work directory\n")),(0,o.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/user_docs/reference/cli/kusion/"},"kusion"),"\t - Kusion is the platform engineering engine of KusionStack")),(0,o.kt)("h6",{id:"auto-generated-by-spf13cobra-on-30-nov-2023"},"Auto generated by spf13/cobra on 30-Nov-2023"))}p.isMDXComponent=!0}}]);