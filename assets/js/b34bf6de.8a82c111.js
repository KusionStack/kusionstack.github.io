"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[851],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return a?t.createElement(f,i(i({ref:n},d),{},{components:a})):t.createElement(f,i({ref:n},d))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9910:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},i="PodTransitionRule",l={unversionedId:"operating/manuals/podtransitionrule",id:"operating/manuals/podtransitionrule",title:"PodTransitionRule",description:"In normal pod lifecycle,  some phases are defined. For example, K8s Pods follow a defined lifecycle\uff0cstarting in the Pending phase, moving through Running if at least one of its primary containers starts OK, and then through either the Succeeded or Failed phases depending on whether any container in the Pod terminated in failure.",source:"@site/docs/operating/manuals/podtransitionrule.md",sourceDirName:"operating/manuals",slug:"/operating/manuals/podtransitionrule",permalink:"/docs/operating/manuals/podtransitionrule",draft:!1,editUrl:"https://github.com/KusionStack/kusionstack.io/blob/main/docs/operating/manuals/podtransitionrule.md",tags:[],version:"current",lastUpdatedBy:"Kan Wu",lastUpdatedAt:1695796088,formattedLastUpdatedAt:"Sep 27, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"operating",previous:{title:"ResourceConsist",permalink:"/docs/operating/manuals/resourceconsist"}},s={},p=[{value:"Rule Definition",id:"rule-definition",level:2},{value:"Available Policy",id:"available-policy",level:3},{value:"maxUnavailable",id:"maxunavailable",level:4},{value:"minAvailable",id:"minavailable",level:4},{value:"Label Check",id:"label-check",level:3},{value:"Webhook",id:"webhook",level:3}],d={toc:p};function c(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"podtransitionrule"},"PodTransitionRule"),(0,r.kt)("p",null,"In normal pod lifecycle,  some phases are defined. For example, K8s Pods follow a defined lifecycle\uff0cstarting in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pending")," phase, moving through ",(0,r.kt)("inlineCode",{parentName:"p"},"Running")," if at least one of its primary containers starts ",(0,r.kt)("inlineCode",{parentName:"p"},"OK"),", and then through either the ",(0,r.kt)("inlineCode",{parentName:"p"},"Succeeded")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Failed")," phases depending on whether any container in the Pod terminated in failure."),(0,r.kt)("p",null,"These phase definitions can fulfill basic Pod change scenarios, but it are ambiguous.\nActually, before pod upgrade or ready, it is necessary to have some check mechanisms in place to ensure the safety of pod changes. Fortunately, ",(0,r.kt)("a",{parentName:"p",href:"/docs/operating/concepts/podopslifecycle"},"PodOpsLifecycle")," extends and supports some check stages: ",(0,r.kt)("inlineCode",{parentName:"p"},"PreCheck")," before pod upgrade and ",(0,r.kt)("inlineCode",{parentName:"p"},"PostCheck")," before pod ready."),(0,r.kt)("p",null,"To ensure a more fine-grained and controlled change process for Pods, we introduce custom rules or perform additional tasks as prerequisites for state transitions before the desired state of a Pod is achieved. Similar to the Pod ",(0,r.kt)("inlineCode",{parentName:"p"},"readinessGates"),", where certain conditions must be met for a Pod to be considered readiness. For example, we consider a Pod ready for the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostCheck")," phase only if it has specific labels. For this purpose, we introduce the ",(0,r.kt)("inlineCode",{parentName:"p"},"PodTransitionRule")," as a prerequisite for the state transition of a Pod."),(0,r.kt)("h2",{id:"rule-definition"},"Rule Definition"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"PodTransitionRule")," to define a set of transition rules for your workload pods.\nEach rule will be executed at the corresponding stage, and it will be blocked if the conditions are not met."),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps.kusionstack.io/v1alpha1\nkind: PodTransitionRule\nmetadata:\n  name: podtransitionrule-sample\nspec:\n  rules:\n  - availablePolicy:\n      maxUnavailableValue: 50%\n    name: maxUnavailable\n  - stage: PreCheck  # stages are supported by PodOpsLifecycle\n    labelCheck:\n      requires:\n        matchLabels:\n          app.custom/ready: 'true' \n    name: labelCheck\n  - stage: PostCheck \n    webhook:\n      clientConfig:\n        url: https://...\n        caBundle: Cg==\n      failurePolicy: Fail\n      parameters:\n      - key: podIP\n        valueFrom:\n          fieldRef: \n            fieldPath: status.podIP\n    name: webhookCheck\n  selector:        # select pods in effect\n    matchLabels:\n      app: foo\n")),(0,r.kt)("h3",{id:"available-policy"},"Available Policy"),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"availablePolicy")," rule defines the availability strategy during the Pod update process."),(0,r.kt)("h4",{id:"maxunavailable"},"maxUnavailable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"availablePolicy:\n  maxUnavailable: \n    value: 50%  # int or string \n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"maxUnavailableValue")," is the maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0."),(0,r.kt)("h4",{id:"minavailable"},"minAvailable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"availablePolicy:\n  minAvailable:\n    value: 5  # int or string \n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"minAvailableValue")," is the minimum number of pods that should be available during the update."),(0,r.kt)("h3",{id:"label-check"},"Label Check"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"labelCheck")," rule is used to check if labels are satisfied.\nYou can define your own labels as change check conditions and modify the labels according to your needs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"labelCheck:\n  requirs:\n    matchLabels:\n      app.custom/ready: 'true' \n    matchExpressions:\n    - key: app.custom/forbidden \n      operator: DoesNotExist\n")),(0,r.kt)("h3",{id:"webhook"},"Webhook"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"webhook")," is an HTTP callback: an HTTP POST that occurs when pods on configured stage.\nA web application can determine whether the pod can pass this check based on the request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"webhook:\n  clientConfig: # custom server config\n    url: https://...\n    caBundle: Cg==\n    intervalSeconds: 30\n  failurePolicy: Fail\n  parameters:\n  - key: podIP\n    valueFrom:\n      fieldRef: \n        fieldPath: status.podIP\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Protocol")),(0,r.kt)("p",null,"Request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ \n  "traceId": "<trace-id>",\n  "retryByTrace": false,\n  "stage": "PreTrafficOff",\n  "ruleName": "webhookCheck",\n    "resources": [\n    {\n      "apiVersion": "v1",\n      "kind": "Pod",\n      "name": "pod-a",\n      "parameters": {\n        "podIP": "1.0.0.1"\n      }\n    },\n    {\n      "apiVersion": "v1",\n      "kind": "Pod",\n      "name": "pod-b",\n      "parameters": {\n        "podIP": "1.0.0.2"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "success": false,\n  "message": "msg", \n  "passed": ["pod-a", "pod-b"], \n  "retryByTrace": false\n}\n')),(0,r.kt)("p",null,"Response ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," indicate all pods approved or not. If it's ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"passed")," field can be used to allow partial pods.\nif response ",(0,r.kt)("inlineCode",{parentName:"p"},"retryByTrace=true"),", the next retry request will reuse the previous ",(0,r.kt)("inlineCode",{parentName:"p"},"traceId"),"."))}c.isMDXComponent=!0}}]);