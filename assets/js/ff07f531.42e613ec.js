"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1151],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(f,a(a({ref:t},d),{},{components:n})):o.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},87259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(87462),i=(n(67294),n(3905));const r={sidebar_position:9},a="Kusion Model Library",s={unversionedId:"user_docs/getting-started/konfig",id:"user_docs/getting-started/konfig",title:"Kusion Model Library",description:"Kusion model library, is a preset configuration model described by KCL. It provides users with out-of-the-box, highly abstract configuration interfaces. The original starting point of the model library is to improve the efficiency and experience of YAML users. We hope to simplify the writing of user-side configuration code by abstracting and encapsulating the model with more complex code into a unified model.",source:"@site/docs/user_docs/getting-started/konfig.md",sourceDirName:"user_docs/getting-started",slug:"/user_docs/getting-started/konfig",permalink:"/docs/user_docs/getting-started/konfig",editUrl:"https://github.com/KusionStack/kusionstack.io/blob/main/docs/user_docs/getting-started/konfig.md",tags:[],version:"current",lastUpdatedBy:"Peefy",lastUpdatedAt:1663732311,formattedLastUpdatedAt:"9/21/2022",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"user_docs",previous:{title:"KCL Quick Start",permalink:"/docs/user_docs/getting-started/kcl"},next:{title:"Architecture & Concept",permalink:"/docs/user_docs/concepts/"}},l={},c=[{value:"1. Directory",id:"1-directory",level:2},{value:"2. Test the Konfig",id:"2-test-the-konfig",level:2},{value:"3. Add app",id:"3-add-app",level:2},{value:"4. Konfig Architecture",id:"4-konfig-architecture",level:2}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"kusion-model-library"},"Kusion Model Library"),(0,i.kt)("p",null,"Kusion model library, is a preset configuration model described by KCL. It provides users with out-of-the-box, highly abstract configuration interfaces. The original starting point of the model library is to improve the efficiency and experience of YAML users. We hope to simplify the writing of user-side configuration code by abstracting and encapsulating the model with more complex code into a unified model."),(0,i.kt)("p",null,"Konfig repository address: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KusionStack/konfig"},"https://github.com/KusionStack/konfig")),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(45472).Z,width:"744",height:"590"})),(0,i.kt)("h2",{id:"1-directory"},"1. Directory"),(0,i.kt)("p",null,"First clone the Kusion model library: ",(0,i.kt)("inlineCode",{parentName:"p"},"git clone git@github.com:KusionStack/Konfig.git"),"\u3002"),(0,i.kt)("p",null,"The overall structure of the Config configuration library is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 appops # App Ops\n\u2502   \u251c\u2500\u2500 guestbook-frontend\n\u2502   \u251c\u2500\u2500 http-echo\n\u2502   \u2514\u2500\u2500 nginx-example\n\u251c\u2500\u2500 base                # Kusion Models\n\u2502   \u251c\u2500\u2500 examples        # Kusion Model Examples\n\u2502   \u2502   \u251c\u2500\u2500 monitoring  # monitoring example\n\u2502   \u2502   \u251c\u2500\u2500 native      # Kubernetes example\n\u2502   \u2502   \u2514\u2500\u2500 server\n\u2502   \u2514\u2500\u2500 pkg\n\u2502       \u251c\u2500\u2500 kusion_kubernetes   # Kubernetes low level models\n\u2502       \u251c\u2500\u2500 kusion_models       # core models\n\u2502       \u2514\u2500\u2500 kusion_prometheus   # Prometheus low level models\n\u251c\u2500\u2500 hack                # utils script\n\u2514\u2500\u2500 kcl.mod             # kcl module file\n")),(0,i.kt)("h2",{id:"2-test-the-konfig"},"2. Test the Konfig"),(0,i.kt)("p",null,"After the Kusion tool is installed, execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"make check-all")," test (refer to Project & Stack ), or execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"make check-http-echo")," test ",(0,i.kt)("inlineCode",{parentName:"p"},"appops/http-echo")," application."),(0,i.kt)("p",null,"If you need to test the dev version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"appops/http-echo")," application , you can enter the ",(0,i.kt)("inlineCode",{parentName:"p"},"appops/http-echo/dev")," directory to execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"kusion compile")," command (or through a lower-level ",(0,i.kt)("inlineCode",{parentName:"p"},"kcl -Y kcl.yaml ./ci-test/settings.yaml")," command), and the output file is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"appops/http-echo/dev/ci-test/stdout.golden.yaml")," file ."),(0,i.kt)("h2",{id:"3-add-app"},"3. Add app"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"/docs/user_docs/getting-started/usecase"},"Quick Start/Usecase")," we have shown how to quickly add an application (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/user_docs/concepts/project-stack"},"Project & Stack"),")."),(0,i.kt)("h2",{id:"4-konfig-architecture"},"4. Konfig Architecture"),(0,i.kt)("p",null,"The reason why a large warehouse is used to manage all the IaC configuration codes is that the development subjects of different code packages are different, which will lead to the problems of package management and version management, which leads to the need for the platform side to support the ability of similar compilation platforms. In the big library mode, the business configuration code and basic configuration code are in one big library, so the version dependency management between codes is relatively simple, and the processing on the platform side is relatively simple. It is enough to locate the directory and file of the unique code library, and the code can communicate with each other. Unified management, easy to find, modify and maintain (the big library mode is also the internal practice mode of Google and other leading Internet companies)."),(0,i.kt)("p",null,"The following is the architecture diagram of Konfig:"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",src:n(45472).Z,width:"744",height:"590"})),(0,i.kt)("p",null,"The core model simplifies the configuration code of front-end users through two-layer abstraction of front-end model and back-end model, and the underlying model is automatically generated by ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/cli/openapi"},"KCL OpenAPI")," tool."),(0,i.kt)("p",null,"More detailed documentation of the model can be found in the Reference ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/model"},"Kusion Model Library"),"."))}p.isMDXComponent=!0},45472:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/konfig-arch-01-en-a9ae8cde15ea253742b744eb73c9e935.png"}}]);