"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:3},i="OperationJob",l={unversionedId:"manuals/operationjob",id:"version-v0.6/manuals/operationjob",title:"OperationJob",description:"The OperationJob Workload is responsible for performing one-shot operational tasks on a batch of Pods, providing scaffolding for Pod operation scenarios to reduce user development costs.",source:"@site/kuperator_versioned_docs/version-v0.6/manuals/operationjob.md",sourceDirName:"manuals",slug:"/manuals/operationjob",permalink:"/zh/kuperator/manuals/operationjob",draft:!1,tags:[],version:"v0.6",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"kuperator",previous:{title:"PodDecoration",permalink:"/zh/kuperator/manuals/poddecoration"},next:{title:"PodTransitionRule",permalink:"/zh/kuperator/manuals/podtransitionrule"}},p={},s=[{value:"Replace",id:"replace",level:2},{value:"Prepare Pods",id:"prepare-pods",level:3},{value:"Create OperationJob",id:"create-operationjob",level:3},{value:"Replace Pods",id:"replace-pods",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Action Plugin",id:"action-plugin",level:3},{value:"Register Action",id:"register-action",level:3},{value:"Example",id:"example-1",level:3}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"operationjob"},"OperationJob"),(0,o.kt)("p",null,"The OperationJob Workload is responsible for performing one-shot operational tasks on a batch of Pods, providing scaffolding for Pod operation scenarios to reduce user development costs. "),(0,o.kt)("p",null,"OperationJob offers an abstract interface layer for Pod operational capabilities, supporting developers to implement operational functions as plugins.\nEach operational plugin will be presented as a type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Action")," API in OperationJob, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Replace"),".\nAdditionally, it optionally facilitates seamless integration with the ",(0,o.kt)("inlineCode",{parentName:"p"},"PodOpsLifecycle")," to ensure lossless traffic changes during operations."),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("p",null,"Following docs will guide you to play with OperationJob, and to implement OperationJob action plugin."),(0,o.kt)("h2",{id:"replace"},"Replace"),(0,o.kt)("h3",{id:"prepare-pods"},"Prepare Pods"),(0,o.kt)("p",null,"Given that a ",(0,o.kt)("a",{parentName:"p",href:"/zh/kuperator/manuals/collaset"},"CollaSet")," with more than 2 replicas is presented in your kubernetes cluster."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get cls\nNAME     DESIRED   CURRENT   AVAILABLE   UPDATED   UPDATED_READY   UPDATED_AVAILABLE   CURRENT_REVISION   UPDATED_REVISION   AGE\nfoo      2         2         2           2         2               2                   foo-7bdb974bc7     foo-7bdb974bc7     7s\n\n$ kubectl get pod\nNAME           READY   STATUS    RESTARTS      AGE\nfoo-752sz      1/1     Running   0             41s\nfoo-jttd5      1/1     Running   0             41s\n")),(0,o.kt)("h3",{id:"create-operationjob"},"Create OperationJob"),(0,o.kt)("p",null,"The following ",(0,o.kt)("inlineCode",{parentName:"p"},"operationjob.yaml")," file describes a ",(0,o.kt)("inlineCode",{parentName:"p"},"Replace")," OperationJob, which will replace pods in ",(0,o.kt)("inlineCode",{parentName:"p"},"targets"),".\nFor each replace operation, a new pod will be created to replace the target pod, which will not be deleted until new pod is ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/zh/kuperator/concepts/podopslifecycle#introduction"},"ServiceAvailable")),".  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps.kusionstack.io/v1alpha1\nkind: OperationJob\nmetadata:\n  name: opj-replace\n  namespace: default\nspec:\n  action: Replace # Operation type is replace\n  activeDeadlineSeconds: 3600 # job will be forced failed after 3600s since startTime\n  TTLSecondsAfterFinished: 18000 # job will be deleted after 18000s since job failed or succeeded\n  partition: 1 # replace 1 pod at this time\n  targets:\n  - name: foo-jttd5\n  - name: foo-752sz\n")),(0,o.kt)("p",null,"Create OperationJob ",(0,o.kt)("inlineCode",{parentName:"p"},"opj-replace")," to replace target pods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f operationjob.yaml\noperationjobs.apps.kusionstack.io/opj-replace created\n")),(0,o.kt)("h3",{id:"replace-pods"},"Replace Pods"),(0,o.kt)("p",null,"The status of OperationJob is updated, and target pod ",(0,o.kt)("inlineCode",{parentName:"p"},"foo-jttd5")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"p"},"foo-mpl7n"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get opj\nNAME          PROGRESS     AGE\nopj-replace   Processing   11s\n\n$ kubectl get pod\nNAME        READY   STATUS              RESTARTS   AGE\nfoo-752sz   1/1     Running             0          92s\nfoo-jttd5   1/1     Running             0          92s\nfoo-mpl7n   0/1     ContainerCreating   0          4s\n\n$ kubectl get opj opj-replace -o yaml | grep -A20 status\nstatus:\n  observedGeneration: 1\n  progress: Processing # job is processing\n  succeededPodCount: 1\n  targetDetails:\n  - extraInfo:\n      NewPod: foo-mpl7n \n    name: foo-jttd5\n    progress: Succeeded # foo-jttd5 is replaced by foo-mpl7n suceeded\n  - name: foo-752sz\n    progress: Pending # replace is pending\n  totalPodCount: 2\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"status.progress")," can be:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Pending"),": operationJob is waiting to be processed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Processing"),": operationJob is being processed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Failed"),": some target pods have failed to operate"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Succeeded"),": all target pods have succeeded to operate")),(0,o.kt)("p",null,"Note that if a target pod has failed to operate, ",(0,o.kt)("inlineCode",{parentName:"p"},"status.targetDetails[x].error")," will show the ",(0,o.kt)("inlineCode",{parentName:"p"},"reason")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," for failure.\nAnd if it has succeeded to operate, the error status will be cleared."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"status.targetDetails[x].progress")," can be:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Pending"),": target pod is waiting to be operated"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Processing"),": target pod  is being operated"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Failed"),": target pod has failed to operate"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Succeeded"),": target pod has succeeded to operate")),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"opj-replace")," to replace the other target pod."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl edit opj opj-replace\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# operationjob.yaml\n# Edit partition to 2 to replace all pods\n...\nspec:\n  ...\n  partition: 2\n")),(0,o.kt)("p",null,"All pods replaced."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ kubectl get pod\nNAME        READY   STATUS              RESTARTS   AGE\nfoo-752sz   1/1     Running             0          8m5s\nfoo-mpl7n   1/1     Running             0          6m37s\nfoo-rgxbl   0/1     ContainerCreating   0          5s\n\n$ kubectl get opj opj-replace -o yaml | grep -A20 status\nstatus:\n  endTimestamp: "2024-09-13T08:47:43Z"\n  observedGeneration: 2\n  progress: Succeeded # all pods are replaced, job is suceeded\n  succeededPodCount: 2\n  targetDetails:\n  - extraInfo:\n      NewPod: foo-mpl7n\n    name: foo-jttd5\n    progress: Succeeded\n  - extraInfo:\n      NewPod: foo-rgxbl\n    name: foo-752sz\n    progress: Succeeded # foo-752sz is replaced by foo-rgxbl suceeded\n  totalPodCount: 2\n\n$ kubectl get opj\nNAME          PROGRESS    AGE\nopj-replace   Succeeded   6m42s\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"status.targetDetails[x].extraInfo")," is a key-value string map, which is used to store operate information for target.\nDevelopers can define and utilize specified extraInfos for their action plugins."),(0,o.kt)("h2",{id:"tutorial"},"Tutorial"),(0,o.kt)("h3",{id:"action-plugin"},"Action Plugin"),(0,o.kt)("p",null,"Developers implement and register action plugin, then OperationJob controller is responsible for running it:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"operationjob-framework",src:n(85857).Z,width:"2726",height:"1348"})),(0,o.kt)("p",null,"Action plugin is formulated as golang adapter ",(0,o.kt)("inlineCode",{parentName:"p"},"ActionHandler"),", which consists 4 idempotent functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Setup")," sets up action in ",(0,o.kt)("inlineCode",{parentName:"li"},"AddToMgr"),", i.e., watch resources for action, register cache index"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"OperateTarget")," operates what you want to the target pod"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GetOpsProgress"),' gets current operation status of target pod, i.e., "Processing", "Failed" and "Succeeded"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ReleaseTarget")," cleans up target pod and operating environment when operation finished or job deleted")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"...\ntype ActionHandler interface {\n    // Setup sets up action with manager in AddToMgr, i.e., watch, cache...\n    Setup(controller.Controller, *mixin.ReconcilerMixin) error\n\n    // OperateTarget do real operation to target\n    OperateTarget(context.Context, *OpsCandidate, *appsv1alpha1.OperationJob) error\n\n    // GetOpsProgress returns target's current opsStatus, e.g., progress, reason, message\n    GetOpsProgress(context.Context, *OpsCandidate, *appsv1alpha1.OperationJob) (progress ActionProgress, err error)\n\n    // ReleaseTarget releases the target from operation when the operationJob is deleted\n    ReleaseTarget(context.Context, *OpsCandidate, *appsv1alpha1.OperationJob) error\n}\n")),(0,o.kt)("h3",{id:"register-action"},"Register Action"),(0,o.kt)("p",null,"Developers can register implemented action plugins by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"RegisterAction")," before OperationJob controller ",(0,o.kt)("inlineCode",{parentName:"p"},"AddToMgr")," is called.\nThe register function consists 3 parameters: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"action"),": string, name of action plugin, showed in ",(0,o.kt)("inlineCode",{parentName:"li"},"spec.action")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hander"),": ActionHandler, the implemented adapter"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"enablePodOpsLifecycle"),": bool, if true, target pods will be operated in the manner of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/zh/kuperator/concepts/podopslifecycle"},"PodOpsLifecycle")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"...\n// RegisterAction will register an operationJob action with handler and lifecycleAdapter\n// Note: if enablePodOpsLifecycle=false, this operation will be done directly, ignoring podOpsLifecycle\nfunc RegisterAction(action string, handler ActionHandler, enablePodOpsLifecycle bool) {...}\n")),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("p",null,"As an example, OperationJob natively supports Replace action.\nThe ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/KusionStack/kuperator/blob/e43c4c0dc3bda50789988b10695e7a314cb44784/pkg/controllers/operationjob/replace/replace.go#L49"},"Replace ActionHandler"))," is implemented and registered before OperationJob controller added in ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/KusionStack/kuperator/blob/e43c4c0dc3bda50789988b10695e7a314cb44784/main.go#L113"},"main function")),"."))}d.isMDXComponent=!0},85857:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/operationjob-frame-791c429cba63c20caf644c90993098d8.png"}}]);